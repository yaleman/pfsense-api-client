{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pfsense-api-client Provides python methods to call the pfsense API endpoint provided by the package at https://github.com/jaredhendrickson13/pfsense-api Authentication Configure it one of two ways Pass the config_filename which is a JSON file with username/password/host (and optionally port). Directly pass username/password/hostname (and optionally port). At the moment it only supports the \"Local Database\" authentication method of username/password, but it should be relatively trivial to add JWT/API Token support at a later time. (If you're going to do this, modify init to have a \"mode\" setting, which call() checks, then modifies things as needed.)","title":"Home"},{"location":"#pfsense-api-client","text":"Provides python methods to call the pfsense API endpoint provided by the package at https://github.com/jaredhendrickson13/pfsense-api","title":"pfsense-api-client"},{"location":"#authentication","text":"Configure it one of two ways Pass the config_filename which is a JSON file with username/password/host (and optionally port). Directly pass username/password/hostname (and optionally port). At the moment it only supports the \"Local Database\" authentication method of username/password, but it should be relatively trivial to add JWT/API Token support at a later time. (If you're going to do this, modify init to have a \"mode\" setting, which call() checks, then modifies things as needed.)","title":"Authentication"},{"location":"api/","text":"pfSense API client PFSenseAPIClient pfSense API Client Source code in pfsense_api_client/__init__.py class PFSenseAPIClient (): \"\"\" pfSense API Client \"\"\" # pylint: disable=too-many-arguments def __init__ ( self , username : Optional [ str ] = None , password : Optional [ str ] = None , hostname : Optional [ str ] = None , port : Optional [ int ] = None , config_filename : Optional [ str ] = None , mode : Optional [ str ] = None ): if username : self . username = username if password : self . password = password if hostname : self . hostname = hostname if port : self . port = port if mode : self . mode = mode else : self . mode = \"local\" if config_filename : self . config_filename = Path ( os . path . expanduser ( config_filename )) if not self . config_filename . exists (): error = f \"Filename { self . config_filename . as_posix () } does not exist.\" raise FileNotFoundError ( error ) pydantic_config = PFSenseConfig ( ** json . load ( self . config_filename . open ( encoding = \"utf8\" ))) self . hostname = pydantic_config . hostname self . username = pydantic_config . username self . password = pydantic_config . password self . port = pydantic_config . port self . mode = pydantic_config . mode or \"local\" self . baseurl = f \"https:// { self . hostname } \" if hasattr ( self , \"port\" ): self . baseurl += f \": { self . port } \" @validate_arguments def call ( self , url : str , method : Optional [ str ] = None , payload : Dict [ str , Any ] = None , ) -> requests . Response : \"\"\" makes an API call \"\"\" call_url = f \" { self . baseurl }{ url } \" # print(f\"mode: {self.mode}\") if self . mode == \"local\" : # this is the default if not payload : payload = { \"client-id\" : self . username , \"client-token\" : self . password } else : payload [ \"client-id\" ] = self . username payload [ \"client-token\" ] = self . password else : raise NotImplementedError ( \"JWT and Access Token aren't implemented yet.\" ) if method is None : method = \"GET\" # print(f\"calling {call_url} {method}\") # print(f\"payload: {payload}\") if method == \"GET\" : response = requests . get ( url = call_url , params = payload ) elif method == \"POST\" : response = requests . post ( url = call_url , data = json . dumps ( payload )) else : response = requests . request ( method = method , url = call_url , data = json . dumps ( payload )) response . raise_for_status () return response def request_access_token ( self ): \"\"\" gets a temporary access token https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-request-access-token \"\"\" url = \"/api/v1/access_token\" return self . call ( url = url , method = \"POST\" ) get_firewall_rule = firewall . get_firewall_rule apply_firewall_changes = firewall . apply_firewall_changes delete_all_firewall_rules = firewall . delete_all_firewall_rules # lol get_firewall_alias = firewall . get_firewall_alias create_firewall_alias = firewall . create_firewall_alias delete_firewall_alias = firewall . delete_firewall_alias get_firewall_nat_one_to_one = firewall . get_firewall_nat_one_to_one get_nat_outbound_mapping = firewall . get_nat_outbound_mapping get_firewall_nat_port_forward = firewall . get_firewall_nat_port_forward get_firewall_schedule = firewall . get_firewall_schedule get_firewall_states = firewall . get_firewall_states get_firewall_states_size = firewall . get_firewall_states_size get_system_api_error = system . get_system_api_error get_system_api_version = system . get_system_api_version get_traffic_shaper_limiter = firewall . get_traffic_shaper_limiter get_virtual_ip = firewall . get_virtual_ip update_system_api_configuration = system . update_system_api_configuration def execute_shell_command ( self , shell_cmd : str ): \"\"\" execute a shell command on the firewall https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-execute-shell-command \"\"\" url = \"/api/v1/diagnostics/command_prompt\" method = \"POST\" return self . call ( url = url , method = method , payload = { \"shell_cmd\" : shell_cmd }, ) apply_firewall_changes ( self ) Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall Source code in pfsense_api_client/__init__.py def apply_firewall_changes ( self ) -> requests . Response : \"\"\"Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall \"\"\" url = \"/api/v1/firewall/apply\" method = \"POST\" return self . call ( url , method ) call ( self , url , method = None , payload = None ) makes an API call Source code in pfsense_api_client/__init__.py @validate_arguments def call ( self , url : str , method : Optional [ str ] = None , payload : Dict [ str , Any ] = None , ) -> requests . Response : \"\"\" makes an API call \"\"\" call_url = f \" { self . baseurl }{ url } \" # print(f\"mode: {self.mode}\") if self . mode == \"local\" : # this is the default if not payload : payload = { \"client-id\" : self . username , \"client-token\" : self . password } else : payload [ \"client-id\" ] = self . username payload [ \"client-token\" ] = self . password else : raise NotImplementedError ( \"JWT and Access Token aren't implemented yet.\" ) if method is None : method = \"GET\" # print(f\"calling {call_url} {method}\") # print(f\"payload: {payload}\") if method == \"GET\" : response = requests . get ( url = call_url , params = payload ) elif method == \"POST\" : response = requests . post ( url = call_url , data = json . dumps ( payload )) else : response = requests . request ( method = method , url = call_url , data = json . dumps ( payload )) response . raise_for_status () return response create_firewall_alias ( self , name , alias_type , descr , address , detail , apply = True ) Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases Source code in pfsense_api_client/__init__.py @pydantic . validate_arguments () def create_firewall_alias ( self , name : str , alias_type : str , descr : str , address : Union [ str , List [ str ]], detail : Union [ str , List [ str ]], apply : bool = True , ) -> requests . Response : \"\"\" Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" method = \"POST\" payload = {} class FirewallAlias ( pydantic . BaseModel ): \"\"\" validating the firewall alias \"\"\" name : str type : AliasTypes descr : str address : Union [ str , List [ str ]] detail : Union [ str , List [ str ]] apply : bool payload = FirewallAlias ( name = name , type = alias_type , descr = descr , address = address , detail = detail , apply = apply , ) . dict () return self . call ( url = url , method = method , payload = payload , ) delete_all_firewall_rules ( self ) Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules Source code in pfsense_api_client/__init__.py def delete_all_firewall_rules ( self ): \"\"\"Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules \"\"\" url = \"/api/v1/firewall/rule/flush\" method = \"DELETE\" self . call ( url = url , method = method ) delete_firewall_alias ( self , name , apply = True ) Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. Source code in pfsense_api_client/__init__.py @pydantic . validate_arguments () def delete_firewall_alias ( self , name : str , apply : bool = True , ) -> requests . Response : \"\"\" Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. \"\"\" url = \"/api/v1/firewall/alias\" method = \"DELETE\" payload = { \"id\" : name , \"apply\" : apply } return self . call ( url = url , method = method , payload = payload ) execute_shell_command ( self , shell_cmd ) execute a shell command on the firewall https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-execute-shell-command Source code in pfsense_api_client/__init__.py def execute_shell_command ( self , shell_cmd : str ): \"\"\" execute a shell command on the firewall https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-execute-shell-command \"\"\" url = \"/api/v1/diagnostics/command_prompt\" method = \"POST\" return self . call ( url = url , method = method , payload = { \"shell_cmd\" : shell_cmd }, ) get_firewall_alias ( self , ** filterargs ) get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases Source code in pfsense_api_client/__init__.py def get_firewall_alias ( self , ** filterargs ) -> requests . Response : \"\"\" get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" return self . call ( url = url , payload = filterargs ) get_firewall_nat_one_to_one ( self , ** filterargs ) Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings Source code in pfsense_api_client/__init__.py def get_firewall_nat_one_to_one ( self , ** filterargs ) -> requests . Response : \"\"\"Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings \"\"\" url = \"/api/v1/firewall/nat/one_to_one\" return self . call ( url , payload = filterargs ) get_firewall_nat_port_forward ( self , ** filterargs ) Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards Source code in pfsense_api_client/__init__.py def get_firewall_nat_port_forward ( self , ** filterargs ) -> requests . Response : \"\"\"Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards\"\"\" url = \"/api/v1/firewall/nat/port_forward\" return self . call ( url , payload = filterargs ) get_firewall_rule ( self , ** filterargs ) Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules Source code in pfsense_api_client/__init__.py def get_firewall_rule ( self , ** filterargs ) -> requests . Response : \"\"\" Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules \"\"\" url = \"/api/v1/firewall/rule\" return self . call ( url = url , payload = filterargs ) get_firewall_schedule ( self , ** filterargs ) Read all existing firewall schedules. Source code in pfsense_api_client/__init__.py def get_firewall_schedule ( self , ** filterargs ) -> requests . Response : \"\"\"Read all existing firewall schedules. \"\"\" url = \"/api/v1/firewall/schedule\" return self . call ( url , payload = filterargs ) get_firewall_states ( self , ** filterargs ) Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states Source code in pfsense_api_client/__init__.py def get_firewall_states ( self , ** filterargs ) -> requests . Response : \"\"\"Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states \"\"\" url = \"/api/v1/firewall/states\" return self . call ( url , payload = filterargs ) get_firewall_states_size ( self , ** filterargs ) Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size Source code in pfsense_api_client/__init__.py def get_firewall_states_size ( self , ** filterargs ) -> requests . Response : \"\"\"Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size \"\"\" url = \"/api/v1/firewall/states/size\" return self . call ( url , payload = filterargs ) get_nat_outbound_mapping ( self , ** filterargs ) Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings Source code in pfsense_api_client/__init__.py def get_nat_outbound_mapping ( self , ** filterargs ) -> requests . Response : \"\"\"Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings \"\"\" url = \"/api/v1/firewall/nat/outbound/mapping\" return self . call ( url , payload = filterargs ) get_system_api_error ( self ) gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library Source code in pfsense_api_client/__init__.py def get_system_api_error ( self ): \"\"\" gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library \"\"\" url = \"/api/v1/system/api/error\" return self . call ( url ) get_system_api_version ( self ) Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/__init__.py def get_system_api_version ( self ): \"\"\" Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api/version\" method = \"GET\" return self . call ( url , method ) get_traffic_shaper_limiter ( self , ** filterargs ) Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters Source code in pfsense_api_client/__init__.py def get_traffic_shaper_limiter ( self , ** filterargs ) -> requests . Response : \"\"\"Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters\"\"\" url = \"/api/v1/firewall/traffic_shaper/limiter\" return self . call ( url , payload = filterargs ) get_virtual_ip ( self , ** filterargs ) Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips Source code in pfsense_api_client/__init__.py def get_virtual_ip ( self , ** filterargs ) -> requests . Response : \"\"\" Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips\"\"\" return self . call ( \"/api/v1/firewall/virtual_ip\" , payload = filterargs ) request_access_token ( self ) gets a temporary access token https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-request-access-token Source code in pfsense_api_client/__init__.py def request_access_token ( self ): \"\"\" gets a temporary access token https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-request-access-token \"\"\" url = \"/api/v1/access_token\" return self . call ( url = url , method = \"POST\" ) update_system_api_configuration ( self , ** kwargs ) Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/__init__.py def update_system_api_configuration ( self , ** kwargs ): \"\"\" Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api\" method = \"PUT\" class APIConfiguration ( pydantic . BaseModel ): \"\"\" API Config options\"\"\" enable : Optional [ bool ] persist : Optional [ bool ] readonly : bool allow_options : Optional [ bool ] available_interfaces : Optional [ List [ str ]] authmode : Optional [ str ] jwt_exp : Optional [ int ] keyhash : Optional [ str ] keybytes : Optional [ int ] custom_headers : Optional [ List [ str ]] hasync : Optional [ bool ] hasync_hosts : Optional [ List [ str ]] hasync_username : Optional [ str ] hasync_password : Optional [ str ] payload = APIConfiguration ( ** kwargs ) return self . call ( url , method , payload = payload . dict ()) PFSenseConfig ( BaseModel ) pydantic-model This sets up the right typing from the config file Source code in pfsense_api_client/__init__.py class PFSenseConfig ( BaseModel ): \"\"\" This sets up the right typing from the config file\"\"\" username : str password : str port : int hostname : str mode : Optional [ str ] constants constant values firewall firewall-rule related things AliasTypes ( str , Enum ) types for firewall aliases Source code in pfsense_api_client/firewall.py class AliasTypes ( str , Enum ): \"\"\" types for firewall aliases \"\"\" host = \"host\" # pylint: disable=invalid-name network = \"network\" # pylint: disable=invalid-name port = \"port\" # pylint: disable=invalid-name apply_firewall_changes ( self ) Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall Source code in pfsense_api_client/firewall.py def apply_firewall_changes ( self ) -> requests . Response : \"\"\"Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall \"\"\" url = \"/api/v1/firewall/apply\" method = \"POST\" return self . call ( url , method ) create_firewall_alias ( self , name , alias_type , descr , address , detail , apply = True ) Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases Source code in pfsense_api_client/firewall.py @pydantic . validate_arguments () def create_firewall_alias ( self , name : str , alias_type : str , descr : str , address : Union [ str , List [ str ]], detail : Union [ str , List [ str ]], apply : bool = True , ) -> requests . Response : \"\"\" Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" method = \"POST\" payload = {} class FirewallAlias ( pydantic . BaseModel ): \"\"\" validating the firewall alias \"\"\" name : str type : AliasTypes descr : str address : Union [ str , List [ str ]] detail : Union [ str , List [ str ]] apply : bool payload = FirewallAlias ( name = name , type = alias_type , descr = descr , address = address , detail = detail , apply = apply , ) . dict () return self . call ( url = url , method = method , payload = payload , ) delete_all_firewall_rules ( self ) Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules Source code in pfsense_api_client/firewall.py def delete_all_firewall_rules ( self ): \"\"\"Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules \"\"\" url = \"/api/v1/firewall/rule/flush\" method = \"DELETE\" self . call ( url = url , method = method ) delete_firewall_alias ( self , name , apply = True ) Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. Source code in pfsense_api_client/firewall.py @pydantic . validate_arguments () def delete_firewall_alias ( self , name : str , apply : bool = True , ) -> requests . Response : \"\"\" Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. \"\"\" url = \"/api/v1/firewall/alias\" method = \"DELETE\" payload = { \"id\" : name , \"apply\" : apply } return self . call ( url = url , method = method , payload = payload ) get_firewall_alias ( self , ** filterargs ) get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases Source code in pfsense_api_client/firewall.py def get_firewall_alias ( self , ** filterargs ) -> requests . Response : \"\"\" get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" return self . call ( url = url , payload = filterargs ) get_firewall_nat_one_to_one ( self , ** filterargs ) Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings Source code in pfsense_api_client/firewall.py def get_firewall_nat_one_to_one ( self , ** filterargs ) -> requests . Response : \"\"\"Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings \"\"\" url = \"/api/v1/firewall/nat/one_to_one\" return self . call ( url , payload = filterargs ) get_firewall_nat_port_forward ( self , ** filterargs ) Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards Source code in pfsense_api_client/firewall.py def get_firewall_nat_port_forward ( self , ** filterargs ) -> requests . Response : \"\"\"Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards\"\"\" url = \"/api/v1/firewall/nat/port_forward\" return self . call ( url , payload = filterargs ) get_firewall_rule ( self , ** filterargs ) Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules Source code in pfsense_api_client/firewall.py def get_firewall_rule ( self , ** filterargs ) -> requests . Response : \"\"\" Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules \"\"\" url = \"/api/v1/firewall/rule\" return self . call ( url = url , payload = filterargs ) get_firewall_schedule ( self , ** filterargs ) Read all existing firewall schedules. Source code in pfsense_api_client/firewall.py def get_firewall_schedule ( self , ** filterargs ) -> requests . Response : \"\"\"Read all existing firewall schedules. \"\"\" url = \"/api/v1/firewall/schedule\" return self . call ( url , payload = filterargs ) get_firewall_states ( self , ** filterargs ) Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states Source code in pfsense_api_client/firewall.py def get_firewall_states ( self , ** filterargs ) -> requests . Response : \"\"\"Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states \"\"\" url = \"/api/v1/firewall/states\" return self . call ( url , payload = filterargs ) get_firewall_states_size ( self , ** filterargs ) Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size Source code in pfsense_api_client/firewall.py def get_firewall_states_size ( self , ** filterargs ) -> requests . Response : \"\"\"Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size \"\"\" url = \"/api/v1/firewall/states/size\" return self . call ( url , payload = filterargs ) get_nat_outbound_mapping ( self , ** filterargs ) Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings Source code in pfsense_api_client/firewall.py def get_nat_outbound_mapping ( self , ** filterargs ) -> requests . Response : \"\"\"Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings \"\"\" url = \"/api/v1/firewall/nat/outbound/mapping\" return self . call ( url , payload = filterargs ) get_traffic_shaper ( self , ** filterargs ) Read all configured traffic shapers. https://github.com/jaredhendrickson13/pfsense-api#3-read-traffic-shapers Source code in pfsense_api_client/firewall.py def get_traffic_shaper ( self , ** filterargs ) -> requests . Response : \"\"\"Read all configured traffic shapers. https://github.com/jaredhendrickson13/pfsense-api#3-read-traffic-shapers \"\"\" url = \"/api/v1/firewall/traffic_shaper\" return self . call ( url , payload = filterargs ) get_traffic_shaper_limiter ( self , ** filterargs ) Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters Source code in pfsense_api_client/firewall.py def get_traffic_shaper_limiter ( self , ** filterargs ) -> requests . Response : \"\"\"Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters\"\"\" url = \"/api/v1/firewall/traffic_shaper/limiter\" return self . call ( url , payload = filterargs ) get_virtual_ip ( self , ** filterargs ) Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips Source code in pfsense_api_client/firewall.py def get_virtual_ip ( self , ** filterargs ) -> requests . Response : \"\"\" Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips\"\"\" return self . call ( \"/api/v1/firewall/virtual_ip\" , payload = filterargs ) interface interface-related things routing routing-related things service special dns DNS services status status-related endpoints system system-related endpoints get_system_api_error ( self ) gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library Source code in pfsense_api_client/system.py def get_system_api_error ( self ): \"\"\" gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library \"\"\" url = \"/api/v1/system/api/error\" return self . call ( url ) get_system_api_version ( self ) Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/system.py def get_system_api_version ( self ): \"\"\" Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api/version\" method = \"GET\" return self . call ( url , method ) update_system_api_configuration ( self , ** kwargs ) Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/system.py def update_system_api_configuration ( self , ** kwargs ): \"\"\" Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api\" method = \"PUT\" class APIConfiguration ( pydantic . BaseModel ): \"\"\" API Config options\"\"\" enable : Optional [ bool ] persist : Optional [ bool ] readonly : bool allow_options : Optional [ bool ] available_interfaces : Optional [ List [ str ]] authmode : Optional [ str ] jwt_exp : Optional [ int ] keyhash : Optional [ str ] keybytes : Optional [ int ] custom_headers : Optional [ List [ str ]] hasync : Optional [ bool ] hasync_hosts : Optional [ List [ str ]] hasync_username : Optional [ str ] hasync_password : Optional [ str ] payload = APIConfiguration ( ** kwargs ) return self . call ( url , method , payload = payload . dict ())","title":"API Documentation"},{"location":"api/#pfsense_api_client.PFSenseAPIClient","text":"pfSense API Client Source code in pfsense_api_client/__init__.py class PFSenseAPIClient (): \"\"\" pfSense API Client \"\"\" # pylint: disable=too-many-arguments def __init__ ( self , username : Optional [ str ] = None , password : Optional [ str ] = None , hostname : Optional [ str ] = None , port : Optional [ int ] = None , config_filename : Optional [ str ] = None , mode : Optional [ str ] = None ): if username : self . username = username if password : self . password = password if hostname : self . hostname = hostname if port : self . port = port if mode : self . mode = mode else : self . mode = \"local\" if config_filename : self . config_filename = Path ( os . path . expanduser ( config_filename )) if not self . config_filename . exists (): error = f \"Filename { self . config_filename . as_posix () } does not exist.\" raise FileNotFoundError ( error ) pydantic_config = PFSenseConfig ( ** json . load ( self . config_filename . open ( encoding = \"utf8\" ))) self . hostname = pydantic_config . hostname self . username = pydantic_config . username self . password = pydantic_config . password self . port = pydantic_config . port self . mode = pydantic_config . mode or \"local\" self . baseurl = f \"https:// { self . hostname } \" if hasattr ( self , \"port\" ): self . baseurl += f \": { self . port } \" @validate_arguments def call ( self , url : str , method : Optional [ str ] = None , payload : Dict [ str , Any ] = None , ) -> requests . Response : \"\"\" makes an API call \"\"\" call_url = f \" { self . baseurl }{ url } \" # print(f\"mode: {self.mode}\") if self . mode == \"local\" : # this is the default if not payload : payload = { \"client-id\" : self . username , \"client-token\" : self . password } else : payload [ \"client-id\" ] = self . username payload [ \"client-token\" ] = self . password else : raise NotImplementedError ( \"JWT and Access Token aren't implemented yet.\" ) if method is None : method = \"GET\" # print(f\"calling {call_url} {method}\") # print(f\"payload: {payload}\") if method == \"GET\" : response = requests . get ( url = call_url , params = payload ) elif method == \"POST\" : response = requests . post ( url = call_url , data = json . dumps ( payload )) else : response = requests . request ( method = method , url = call_url , data = json . dumps ( payload )) response . raise_for_status () return response def request_access_token ( self ): \"\"\" gets a temporary access token https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-request-access-token \"\"\" url = \"/api/v1/access_token\" return self . call ( url = url , method = \"POST\" ) get_firewall_rule = firewall . get_firewall_rule apply_firewall_changes = firewall . apply_firewall_changes delete_all_firewall_rules = firewall . delete_all_firewall_rules # lol get_firewall_alias = firewall . get_firewall_alias create_firewall_alias = firewall . create_firewall_alias delete_firewall_alias = firewall . delete_firewall_alias get_firewall_nat_one_to_one = firewall . get_firewall_nat_one_to_one get_nat_outbound_mapping = firewall . get_nat_outbound_mapping get_firewall_nat_port_forward = firewall . get_firewall_nat_port_forward get_firewall_schedule = firewall . get_firewall_schedule get_firewall_states = firewall . get_firewall_states get_firewall_states_size = firewall . get_firewall_states_size get_system_api_error = system . get_system_api_error get_system_api_version = system . get_system_api_version get_traffic_shaper_limiter = firewall . get_traffic_shaper_limiter get_virtual_ip = firewall . get_virtual_ip update_system_api_configuration = system . update_system_api_configuration def execute_shell_command ( self , shell_cmd : str ): \"\"\" execute a shell command on the firewall https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-execute-shell-command \"\"\" url = \"/api/v1/diagnostics/command_prompt\" method = \"POST\" return self . call ( url = url , method = method , payload = { \"shell_cmd\" : shell_cmd }, )","title":"PFSenseAPIClient"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.apply_firewall_changes","text":"Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall Source code in pfsense_api_client/__init__.py def apply_firewall_changes ( self ) -> requests . Response : \"\"\"Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall \"\"\" url = \"/api/v1/firewall/apply\" method = \"POST\" return self . call ( url , method )","title":"apply_firewall_changes()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.call","text":"makes an API call Source code in pfsense_api_client/__init__.py @validate_arguments def call ( self , url : str , method : Optional [ str ] = None , payload : Dict [ str , Any ] = None , ) -> requests . Response : \"\"\" makes an API call \"\"\" call_url = f \" { self . baseurl }{ url } \" # print(f\"mode: {self.mode}\") if self . mode == \"local\" : # this is the default if not payload : payload = { \"client-id\" : self . username , \"client-token\" : self . password } else : payload [ \"client-id\" ] = self . username payload [ \"client-token\" ] = self . password else : raise NotImplementedError ( \"JWT and Access Token aren't implemented yet.\" ) if method is None : method = \"GET\" # print(f\"calling {call_url} {method}\") # print(f\"payload: {payload}\") if method == \"GET\" : response = requests . get ( url = call_url , params = payload ) elif method == \"POST\" : response = requests . post ( url = call_url , data = json . dumps ( payload )) else : response = requests . request ( method = method , url = call_url , data = json . dumps ( payload )) response . raise_for_status () return response","title":"call()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.create_firewall_alias","text":"Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases Source code in pfsense_api_client/__init__.py @pydantic . validate_arguments () def create_firewall_alias ( self , name : str , alias_type : str , descr : str , address : Union [ str , List [ str ]], detail : Union [ str , List [ str ]], apply : bool = True , ) -> requests . Response : \"\"\" Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" method = \"POST\" payload = {} class FirewallAlias ( pydantic . BaseModel ): \"\"\" validating the firewall alias \"\"\" name : str type : AliasTypes descr : str address : Union [ str , List [ str ]] detail : Union [ str , List [ str ]] apply : bool payload = FirewallAlias ( name = name , type = alias_type , descr = descr , address = address , detail = detail , apply = apply , ) . dict () return self . call ( url = url , method = method , payload = payload , )","title":"create_firewall_alias()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.delete_all_firewall_rules","text":"Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules Source code in pfsense_api_client/__init__.py def delete_all_firewall_rules ( self ): \"\"\"Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules \"\"\" url = \"/api/v1/firewall/rule/flush\" method = \"DELETE\" self . call ( url = url , method = method )","title":"delete_all_firewall_rules()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.delete_firewall_alias","text":"Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. Source code in pfsense_api_client/__init__.py @pydantic . validate_arguments () def delete_firewall_alias ( self , name : str , apply : bool = True , ) -> requests . Response : \"\"\" Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. \"\"\" url = \"/api/v1/firewall/alias\" method = \"DELETE\" payload = { \"id\" : name , \"apply\" : apply } return self . call ( url = url , method = method , payload = payload )","title":"delete_firewall_alias()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.execute_shell_command","text":"execute a shell command on the firewall https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-execute-shell-command Source code in pfsense_api_client/__init__.py def execute_shell_command ( self , shell_cmd : str ): \"\"\" execute a shell command on the firewall https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-execute-shell-command \"\"\" url = \"/api/v1/diagnostics/command_prompt\" method = \"POST\" return self . call ( url = url , method = method , payload = { \"shell_cmd\" : shell_cmd }, )","title":"execute_shell_command()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_firewall_alias","text":"get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases Source code in pfsense_api_client/__init__.py def get_firewall_alias ( self , ** filterargs ) -> requests . Response : \"\"\" get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" return self . call ( url = url , payload = filterargs )","title":"get_firewall_alias()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_firewall_nat_one_to_one","text":"Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings Source code in pfsense_api_client/__init__.py def get_firewall_nat_one_to_one ( self , ** filterargs ) -> requests . Response : \"\"\"Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings \"\"\" url = \"/api/v1/firewall/nat/one_to_one\" return self . call ( url , payload = filterargs )","title":"get_firewall_nat_one_to_one()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_firewall_nat_port_forward","text":"Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards Source code in pfsense_api_client/__init__.py def get_firewall_nat_port_forward ( self , ** filterargs ) -> requests . Response : \"\"\"Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards\"\"\" url = \"/api/v1/firewall/nat/port_forward\" return self . call ( url , payload = filterargs )","title":"get_firewall_nat_port_forward()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_firewall_rule","text":"Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules Source code in pfsense_api_client/__init__.py def get_firewall_rule ( self , ** filterargs ) -> requests . Response : \"\"\" Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules \"\"\" url = \"/api/v1/firewall/rule\" return self . call ( url = url , payload = filterargs )","title":"get_firewall_rule()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_firewall_schedule","text":"Read all existing firewall schedules. Source code in pfsense_api_client/__init__.py def get_firewall_schedule ( self , ** filterargs ) -> requests . Response : \"\"\"Read all existing firewall schedules. \"\"\" url = \"/api/v1/firewall/schedule\" return self . call ( url , payload = filterargs )","title":"get_firewall_schedule()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_firewall_states","text":"Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states Source code in pfsense_api_client/__init__.py def get_firewall_states ( self , ** filterargs ) -> requests . Response : \"\"\"Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states \"\"\" url = \"/api/v1/firewall/states\" return self . call ( url , payload = filterargs )","title":"get_firewall_states()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_firewall_states_size","text":"Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size Source code in pfsense_api_client/__init__.py def get_firewall_states_size ( self , ** filterargs ) -> requests . Response : \"\"\"Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size \"\"\" url = \"/api/v1/firewall/states/size\" return self . call ( url , payload = filterargs )","title":"get_firewall_states_size()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_nat_outbound_mapping","text":"Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings Source code in pfsense_api_client/__init__.py def get_nat_outbound_mapping ( self , ** filterargs ) -> requests . Response : \"\"\"Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings \"\"\" url = \"/api/v1/firewall/nat/outbound/mapping\" return self . call ( url , payload = filterargs )","title":"get_nat_outbound_mapping()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_system_api_error","text":"gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library Source code in pfsense_api_client/__init__.py def get_system_api_error ( self ): \"\"\" gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library \"\"\" url = \"/api/v1/system/api/error\" return self . call ( url )","title":"get_system_api_error()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_system_api_version","text":"Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/__init__.py def get_system_api_version ( self ): \"\"\" Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api/version\" method = \"GET\" return self . call ( url , method )","title":"get_system_api_version()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_traffic_shaper_limiter","text":"Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters Source code in pfsense_api_client/__init__.py def get_traffic_shaper_limiter ( self , ** filterargs ) -> requests . Response : \"\"\"Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters\"\"\" url = \"/api/v1/firewall/traffic_shaper/limiter\" return self . call ( url , payload = filterargs )","title":"get_traffic_shaper_limiter()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.get_virtual_ip","text":"Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips Source code in pfsense_api_client/__init__.py def get_virtual_ip ( self , ** filterargs ) -> requests . Response : \"\"\" Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips\"\"\" return self . call ( \"/api/v1/firewall/virtual_ip\" , payload = filterargs )","title":"get_virtual_ip()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.request_access_token","text":"gets a temporary access token https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-request-access-token Source code in pfsense_api_client/__init__.py def request_access_token ( self ): \"\"\" gets a temporary access token https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-request-access-token \"\"\" url = \"/api/v1/access_token\" return self . call ( url = url , method = \"POST\" )","title":"request_access_token()"},{"location":"api/#pfsense_api_client.PFSenseAPIClient.update_system_api_configuration","text":"Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/__init__.py def update_system_api_configuration ( self , ** kwargs ): \"\"\" Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api\" method = \"PUT\" class APIConfiguration ( pydantic . BaseModel ): \"\"\" API Config options\"\"\" enable : Optional [ bool ] persist : Optional [ bool ] readonly : bool allow_options : Optional [ bool ] available_interfaces : Optional [ List [ str ]] authmode : Optional [ str ] jwt_exp : Optional [ int ] keyhash : Optional [ str ] keybytes : Optional [ int ] custom_headers : Optional [ List [ str ]] hasync : Optional [ bool ] hasync_hosts : Optional [ List [ str ]] hasync_username : Optional [ str ] hasync_password : Optional [ str ] payload = APIConfiguration ( ** kwargs ) return self . call ( url , method , payload = payload . dict ())","title":"update_system_api_configuration()"},{"location":"api/#pfsense_api_client.PFSenseConfig","text":"This sets up the right typing from the config file Source code in pfsense_api_client/__init__.py class PFSenseConfig ( BaseModel ): \"\"\" This sets up the right typing from the config file\"\"\" username : str password : str port : int hostname : str mode : Optional [ str ]","title":"PFSenseConfig"},{"location":"api/#pfsense_api_client.constants","text":"constant values","title":"constants"},{"location":"api/#pfsense_api_client.firewall","text":"firewall-rule related things","title":"firewall"},{"location":"api/#pfsense_api_client.firewall.AliasTypes","text":"types for firewall aliases Source code in pfsense_api_client/firewall.py class AliasTypes ( str , Enum ): \"\"\" types for firewall aliases \"\"\" host = \"host\" # pylint: disable=invalid-name network = \"network\" # pylint: disable=invalid-name port = \"port\" # pylint: disable=invalid-name","title":"AliasTypes"},{"location":"api/#pfsense_api_client.firewall.apply_firewall_changes","text":"Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall Source code in pfsense_api_client/firewall.py def apply_firewall_changes ( self ) -> requests . Response : \"\"\"Apply pending firewall changes. This will reload all filter items. This endpoint returns no data. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-apply-firewall \"\"\" url = \"/api/v1/firewall/apply\" method = \"POST\" return self . call ( url , method )","title":"apply_firewall_changes()"},{"location":"api/#pfsense_api_client.firewall.create_firewall_alias","text":"Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases Source code in pfsense_api_client/firewall.py @pydantic . validate_arguments () def create_firewall_alias ( self , name : str , alias_type : str , descr : str , address : Union [ str , List [ str ]], detail : Union [ str , List [ str ]], apply : bool = True , ) -> requests . Response : \"\"\" Add a new host, network or port firewall alias. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-create-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" method = \"POST\" payload = {} class FirewallAlias ( pydantic . BaseModel ): \"\"\" validating the firewall alias \"\"\" name : str type : AliasTypes descr : str address : Union [ str , List [ str ]] detail : Union [ str , List [ str ]] apply : bool payload = FirewallAlias ( name = name , type = alias_type , descr = descr , address = address , detail = detail , apply = apply , ) . dict () return self . call ( url = url , method = method , payload = payload , )","title":"create_firewall_alias()"},{"location":"api/#pfsense_api_client.firewall.delete_all_firewall_rules","text":"Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules Source code in pfsense_api_client/firewall.py def delete_all_firewall_rules ( self ): \"\"\"Deletes all existing firewall rules. This is useful for scripts that need to setup the firewall rules from scratch. Note: this endpoint will not reload the firewall filter automatically, you must make another API call to the /api/v1/firewall/apply endpoint to do so. Ensure firewall rules are created before reloading the filter to prevent lockout!. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#1-delete-all-firewall-rules \"\"\" url = \"/api/v1/firewall/rule/flush\" method = \"DELETE\" self . call ( url = url , method = method )","title":"delete_all_firewall_rules()"},{"location":"api/#pfsense_api_client.firewall.delete_firewall_alias","text":"Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. Source code in pfsense_api_client/firewall.py @pydantic . validate_arguments () def delete_firewall_alias ( self , name : str , apply : bool = True , ) -> requests . Response : \"\"\" Delete an existing alias and (optionally) reload filter. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#2-delete-firewall-aliases field: id in the API is 'name' because 'id' is reserved in python. \"\"\" url = \"/api/v1/firewall/alias\" method = \"DELETE\" payload = { \"id\" : name , \"apply\" : apply } return self . call ( url = url , method = method , payload = payload )","title":"delete_firewall_alias()"},{"location":"api/#pfsense_api_client.firewall.get_firewall_alias","text":"get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases Source code in pfsense_api_client/firewall.py def get_firewall_alias ( self , ** filterargs ) -> requests . Response : \"\"\" get a list of firewall aliases https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-aliases \"\"\" url = \"/api/v1/firewall/alias\" return self . call ( url = url , payload = filterargs )","title":"get_firewall_alias()"},{"location":"api/#pfsense_api_client.firewall.get_firewall_nat_one_to_one","text":"Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings Source code in pfsense_api_client/firewall.py def get_firewall_nat_one_to_one ( self , ** filterargs ) -> requests . Response : \"\"\"Read 1:1 NAT mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-1-to-1-mappings \"\"\" url = \"/api/v1/firewall/nat/one_to_one\" return self . call ( url , payload = filterargs )","title":"get_firewall_nat_one_to_one()"},{"location":"api/#pfsense_api_client.firewall.get_firewall_nat_port_forward","text":"Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards Source code in pfsense_api_client/firewall.py def get_firewall_nat_port_forward ( self , ** filterargs ) -> requests . Response : \"\"\"Read NAT port forward rules. https://github.com/jaredhendrickson13/pfsense-api#3-read-nat-port-forwards\"\"\" url = \"/api/v1/firewall/nat/port_forward\" return self . call ( url , payload = filterargs )","title":"get_firewall_nat_port_forward()"},{"location":"api/#pfsense_api_client.firewall.get_firewall_rule","text":"Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules Source code in pfsense_api_client/firewall.py def get_firewall_rule ( self , ** filterargs ) -> requests . Response : \"\"\" Read firewall rules https://github.com/jaredhendrickson13/pfsense-api#3-read-firewall-rules \"\"\" url = \"/api/v1/firewall/rule\" return self . call ( url = url , payload = filterargs )","title":"get_firewall_rule()"},{"location":"api/#pfsense_api_client.firewall.get_firewall_schedule","text":"Read all existing firewall schedules. Source code in pfsense_api_client/firewall.py def get_firewall_schedule ( self , ** filterargs ) -> requests . Response : \"\"\"Read all existing firewall schedules. \"\"\" url = \"/api/v1/firewall/schedule\" return self . call ( url , payload = filterargs )","title":"get_firewall_schedule()"},{"location":"api/#pfsense_api_client.firewall.get_firewall_states","text":"Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states Source code in pfsense_api_client/firewall.py def get_firewall_states ( self , ** filterargs ) -> requests . Response : \"\"\"Read the current firewall states. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-states \"\"\" url = \"/api/v1/firewall/states\" return self . call ( url , payload = filterargs )","title":"get_firewall_states()"},{"location":"api/#pfsense_api_client.firewall.get_firewall_states_size","text":"Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size Source code in pfsense_api_client/firewall.py def get_firewall_states_size ( self , ** filterargs ) -> requests . Response : \"\"\"Read the maximum firewall state size, the current firewall state size, and the default firewall state size. https://github.com/jaredhendrickson13/pfsense-api#1-read-firewall-state-size \"\"\" url = \"/api/v1/firewall/states/size\" return self . call ( url , payload = filterargs )","title":"get_firewall_states_size()"},{"location":"api/#pfsense_api_client.firewall.get_nat_outbound_mapping","text":"Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings Source code in pfsense_api_client/firewall.py def get_nat_outbound_mapping ( self , ** filterargs ) -> requests . Response : \"\"\"Read existing outbound NAT mode mappings. https://github.com/jaredhendrickson13/pfsense-api#3-read-outbound-nat-mappings \"\"\" url = \"/api/v1/firewall/nat/outbound/mapping\" return self . call ( url , payload = filterargs )","title":"get_nat_outbound_mapping()"},{"location":"api/#pfsense_api_client.firewall.get_traffic_shaper","text":"Read all configured traffic shapers. https://github.com/jaredhendrickson13/pfsense-api#3-read-traffic-shapers Source code in pfsense_api_client/firewall.py def get_traffic_shaper ( self , ** filterargs ) -> requests . Response : \"\"\"Read all configured traffic shapers. https://github.com/jaredhendrickson13/pfsense-api#3-read-traffic-shapers \"\"\" url = \"/api/v1/firewall/traffic_shaper\" return self . call ( url , payload = filterargs )","title":"get_traffic_shaper()"},{"location":"api/#pfsense_api_client.firewall.get_traffic_shaper_limiter","text":"Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters Source code in pfsense_api_client/firewall.py def get_traffic_shaper_limiter ( self , ** filterargs ) -> requests . Response : \"\"\"Get the traffic shaper limiters https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-limiters\"\"\" url = \"/api/v1/firewall/traffic_shaper/limiter\" return self . call ( url , payload = filterargs )","title":"get_traffic_shaper_limiter()"},{"location":"api/#pfsense_api_client.firewall.get_virtual_ip","text":"Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips Source code in pfsense_api_client/firewall.py def get_virtual_ip ( self , ** filterargs ) -> requests . Response : \"\"\" Read virtual IP assignments. https://github.com/jaredhendrickson13/pfsense-api/blob/master/README.md#3-read-virtual-ips\"\"\" return self . call ( \"/api/v1/firewall/virtual_ip\" , payload = filterargs )","title":"get_virtual_ip()"},{"location":"api/#pfsense_api_client.interface","text":"interface-related things","title":"interface"},{"location":"api/#pfsense_api_client.routing","text":"routing-related things","title":"routing"},{"location":"api/#pfsense_api_client.service","text":"","title":"service"},{"location":"api/#pfsense_api_client.service.dns","text":"DNS services","title":"dns"},{"location":"api/#pfsense_api_client.status","text":"status-related endpoints","title":"status"},{"location":"api/#pfsense_api_client.system","text":"system-related endpoints","title":"system"},{"location":"api/#pfsense_api_client.system.get_system_api_error","text":"gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library Source code in pfsense_api_client/system.py def get_system_api_error ( self ): \"\"\" gets the list of error codes https://github.com/jaredhendrickson13/pfsense-api#2-read-system-api-error-library \"\"\" url = \"/api/v1/system/api/error\" return self . call ( url )","title":"get_system_api_error()"},{"location":"api/#pfsense_api_client.system.get_system_api_version","text":"Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/system.py def get_system_api_version ( self ): \"\"\" Read the current API version and locate available version updates. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api/version\" method = \"GET\" return self . call ( url , method )","title":"get_system_api_version()"},{"location":"api/#pfsense_api_client.system.update_system_api_configuration","text":"Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version Source code in pfsense_api_client/system.py def update_system_api_configuration ( self , ** kwargs ): \"\"\" Update the API configuration. https://github.com/jaredhendrickson13/pfsense-api#3-read-system-api-version \"\"\" url = \"/api/v1/system/api\" method = \"PUT\" class APIConfiguration ( pydantic . BaseModel ): \"\"\" API Config options\"\"\" enable : Optional [ bool ] persist : Optional [ bool ] readonly : bool allow_options : Optional [ bool ] available_interfaces : Optional [ List [ str ]] authmode : Optional [ str ] jwt_exp : Optional [ int ] keyhash : Optional [ str ] keybytes : Optional [ int ] custom_headers : Optional [ List [ str ]] hasync : Optional [ bool ] hasync_hosts : Optional [ List [ str ]] hasync_username : Optional [ str ] hasync_password : Optional [ str ] payload = APIConfiguration ( ** kwargs ) return self . call ( url , method , payload = payload . dict ())","title":"update_system_api_configuration()"}]}